name: QR Encoder CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        c_compiler: [gcc, clang, cl]
        presets: [static, shared, debug]
        
        include:
          - presets: static
            build-type: Release
          - presets: shared
            build-type: Release
          - presets: debug
            build-type: Debug

        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            presets: debug
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        # Do not use in-source build directory
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake --preset ${{ matrix.presets }}
          -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build-type }}

      - name: Build Snapshot
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.presets }}
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/bin
            ${{ steps.strings.outputs.build-output-dir }}/lib

      - name: Test
        if: ${{ matrix.build-type == 'Debug' }}
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest --build-config ${{ matrix.build-type }} --test-dir test -V
